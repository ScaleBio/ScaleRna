
manifest {
  name = 'ScaleRna'
  version = '1.4.0'
  description = 'ScaleBio Seq Suite: RNA workflow'
  homePage = 'https://scale.bio'
}


//// Parameter defaults; Can be set at workflow runtime on the nextflow command-line
// See nextflow_schema.json for description
params {
    //// Sample sheet, i.e. path to samples.csv (required!)
    samples = null

    //// Reference genome.json (required!)
    genome = null

    //// Sequencing data input.
    // For alignment, either a runfolder (BCL) or a directory with fastq files is required!
    runFolder = null
    fastqDir = null 
    fastqSamplesheet = null // Optional samplesheet for bcl-convert, replacing the auto-generated one

    // 'Reporting'-workflow, i.e. starting from existing alignment results
    reporting = false // Run only cell-filtering and reporting steps, with optional sample merging
    resultDir = null // Output directory for previous pipeline run (to combine multiple runs, specify in samples.csv)
    
    //// Output options
    outDir = "ScaleRna.out" // Workflow output directory
    bamOut = true // Set of false to skip BAM output from STAR
    fastqOut = false // set to true to publish demultiplexed fastq files to outDir

    //// Library structure (barcode locations and sequences).
    // Can be absolute paths or relative to ${projectDir}/references/
    // RNA kit v1.0: "libV1.json"
    // RNA kit v1.1: "libV1.1.json"
    libStructure = null 

    //// Optional workflow parameters
    splitFastq = false // Split library fastq by PCR well for parallelization
    bclConvertParams = "" //"--bcl-only-lane 1"
    fastqc = true // Run fastqc on input fastqs

    starFeature = "GeneFull_Ex50pAS" // What read to transcript overlaps STAR counts (--soloFeatures)
    starMulti = "PropUnique" // How to handle reads matching multiple genes (--soloMultiMappers)
    starStrand = "Forward" // Strandedness of RNA reads relative to annotated genes
    
    trimFastq = true // PolyA trimming with cutadapt
    trimAdapt = "-a A{8}N{100} -a T{8}N{100}" // Adapters to trim with cutadapt
    starTrimming = "" // Trimming in STAR (in addition to cutadapt)

    //// Cell Thresholding parameters
    topCellPercentage = 99 // Percentage of cells over minReads to use as 'robust max.'
    minCellRatio = 10 // Ratio between transcript counts of top cells and the lower cell threshold
    minReads = 100 // min. counts to consider a barcode as a potential cell
    useSTARthreshold = false // Use STARSolo built-in default cell threshold

    //// Resources and parallelization 
    // Max. resources that can be requested for a single task / process
    task_max_memory = 61.GB
    task_max_cpus = 16
    task_max_time = 48.h
    // Number of fastq files per sample grouped together in one STAR job when using splitFastq
    starGroupSize = 16 

    // Enable preliminary seurat clustering and azimuth cell-type classification
    downstream = false
    merge = false
    
    internalReport = false
    help = false
}

process {
    errorStrategy = 'retry'
    maxRetries = 1

    cpus = { max_cpu(2) }
    memory = { max_mem(4.GB * task.attempt) }
    time = params.task_max_time

    container = "felixschlesinger/scalerna@sha256:8b3d172d4cedb6ad597b62d164a6e4fadd7a1ca96ef5d2e0e3853377691d3017"

    withLabel: small {
        cpus = 1
        memory = { max_mem(2.GB * task.attempt) }
    }
    withLabel: optional {
      errorStrategy = { (task.attempt) <= 2 && (task.exitStatus in 137..140) ? 'retry' : 'ignore' }
    }
    withName:regularizeSamplesCsv {
      errorStrategy = { (task.exitStatus in 137..140) ? 'retry' : 'terminate' }
    }
    withName:bclconvert {
        container = 'nfcore/bclconvert:3.9.3'
        cpus = { max_cpu((16 / task.attempt).round()) }
        memory = { max_mem(52.GB + 8.GB * task.attempt) }
    }
    withName:fastqc {
        container = 'biocontainers/fastqc:v0.11.9_cv8'
    }
    withName:multiqc {
        //container = 'ewels/multiqc:v1.14'
        container = 'quay.io/biocontainers/multiqc:1.14--pyhdfd78af_0'
        memory = { max_mem(12.GB * task.attempt) }
    }
    withName:trimFq {
	    cpus = { max_cpu(4) }
	    memory = { max_mem(2.GB * task.attempt) }
    }
    withName:barcodeParser {
        cpus = { max_cpu(5) }
        memory = { max_mem(6.GB * task.attempt) }
    }
    withName:starsolo {
        cpus = { max_cpu(16) }
        memory = { max_mem(32.GB * task.attempt) }
    }
    withLabel:report {
        container = "felixschlesinger/scalernareport@sha256:12154a5160b7632e1b427023491096169f9844bdf41da9f4916af28153d3c8b0" 
        cpus = { max_cpu(5) }
        memory = { max_mem(10.GB * task.attempt) }
    }
    withLabel:mergeRawStarOutput {
	      container = "felixschlesinger/scalereport@sha256:5041ef7a5a9cd446bf0cfa987e02e62f65125f1090a40b40bb720d8a8f1fbd4e"
	      memory = { max_mem(8.GB * task.attempt) }
    }
}
profiles {
  conda {
    conda.enabled = true
    process.conda = "$projectDir/envs/scaleRna.conda.yml"
    process {
      withLabel:report {
        conda = "$projectDir/envs/scalereport.conda.yml"
      }
    }
  }
  docker {
    // Shared settings for all container engines go here
    docker.enabled = true
    docker.fixOwnership = true
    // docker.runOptions = '-u $(id -u):$(id -g)' // Alt. to fixOwnership; match user ID in container to outside
  }
  singularity {
    singularity.enabled = true 
    singularity.autoMounts = true
    docker.enabled = false
  }
  podman {
    podman.enabled = true 
    docker.enabled = false
  }
}
conda.createTimeout = '1 h'

// nf-core functions to ensure that resource requirements don't go 
// beyond a maximum limit
def max_mem(obj) {
    if (obj.compareTo(params.task_max_memory as nextflow.util.MemoryUnit) == 1)
        return params.task_max_memory as nextflow.util.MemoryUnit
    else
        return obj
}
def max_cpu(obj) {
    return Math.min(obj as int, params.task_max_cpus as int)
}
