manifest {
  name = 'ScaleRna'
  version = 1.1
}


//// Parameter defaults; Can be set at workflow runtime on the nextflow command-line
// See nextflow_schema.json for description
params {
    help = false
    show_hidden_params = false
    
    //// Sequencing data input.
    // Either a runfolder (BCL) or a directory with fastq files is required!
    runFolder = null
    fastqDir = null 
    fastqSamplesheet = null // Optional
    
    //// Sample information (required!)
    samples = "samples.csv"

    //// Reference genome.json (required!)
    genome = null

    //// Library structure (barcode locations and sequences).
    // Can be absolute paths or relative to ${projectDir}/references/
    libStructure = "libV1.json"

    //// Workflow outputs (sub-directory of workflow launch dir)
    outDir = "ScaleRna.out"

    //// Optional workflow parameters
    bclConvertParams = "" //"--bcl-only-lane 1" // Only use lane 1
    fastqc = true // Run fastqc on input fastqs

    starFeature = "GeneFull_Ex50pAS" // What read to transcript overlaps STAR counts
	starStrand = "Forward"
    starTrimming = "" // "--clipAdapterType CellRanger4" // PolyA trimming in STAR
    trimFastq = true // PolyA trimming with cutadapt

    starPATH = "STAR" // Path to STAR executable. By defauled assumed to be on $PATH
    //// Max. resources that can be requested for a single job
    max_memory = 64.GB
    max_cpus = 32
}

process {
    errorStrategy = 'retry'
    maxRetries = 1

    cpus = { max_cpu(2) }
    memory = { max_mem(4.GB * task.attempt) }
    time = 48.h

    container = "felixschlesinger/scalerna@sha256:93515f3eed9ae83776f14e035c971f2f40078b52220acb58ee7dff31b2de6b4d"

    withLabel: small {
        cpus = 1
        memory = { max_mem(2.GB * task.attempt) }
    }
    withName:bclconvert {
        container = 'felixschlesinger/bclconvert'
        cpus = { max_cpu(24) }
        memory = { max_mem(12.GB * task.attempt) }
    }
    withName:fastqc {
        container = 'biocontainers/fastqc:v0.11.9_cv8'
    }
    withName:trimFq {
	    cpus = { max_cpu(4) }
	    memory = { max_mem(2.GB * task.attempt) }
    }
    withName:barcodeParser {
        cpus = { max_cpu(6) }
        memory = { max_mem(6.GB * task.attempt) }
    }
    withName:starsolo {
        cpus = { max_cpu(12) }
        memory = { max_mem(32.GB * task.attempt) } // Set in process based on genome index size
    }
	withLabel:report {
        container = "felixschlesinger/scalereport@sha256:5041ef7a5a9cd446bf0cfa987e02e62f65125f1090a40b40bb720d8a8f1fbd4e" 
        cpus = { max_cpu(5) }
        memory = { max_mem(10.GB * task.attempt) }
    }
}

profiles {
  conda {
    params.starPath = "/home/felix/tools/STAR/source/STAR"
    process {
      conda = "$projectDir/envs/scaleRna.conda.yml"
      withLabel:report { conda = "$projectDir/envs/scalereport.conda.yml" }
    }
  }
  docker {
    // Shared settings for all container engines go here
    docker.enabled = true
  }
  singularity {
    singularity.enabled = true 
    singularity.autoMounts = true
    docker.enabled = false
  }
  podman {
    podman.enabled = true 
    docker.enabled = false
  }
}

// nf-core functions to ensure that resource requirements don't go 
// beyond a maximum limit
def max_mem(obj) {
    if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
    else
        return obj
}
def max_cpu(obj) {
    return Math.min(obj, params.max_cpus as int)
}
