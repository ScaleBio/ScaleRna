manifest {
  name = 'ScaleRna'
  version = '1.2.1'
  description = 'ScaleBio single-cell RNA analysis workflow'
  homePage = 'https://scale.bio'
}


//// Parameter defaults; Can be set at workflow runtime on the nextflow command-line
// See nextflow_schema.json for description
params {
    help = false
    show_hidden_params = false
    
    //// Sequencing data input.
    // Either a runfolder (BCL) or a directory with fastq files is required!
    runFolder = null
    fastqDir = null 
    fastqSamplesheet = null // Optional
    
    //// Sample sheet, i.e. path to samples.csv (required!)
    samples = null

    //// Reference genome.json (required!)
    genome = null

    //// Output options
    outDir = "ScaleRna.out" // Workflow output directory
    bamOut = true // Set of false to skip BAM output from STAR
    fastqOut = false // set to true to publish demultiplexed fastq files to outDir

    //// Library structure (barcode locations and sequences).
    // Can be absolute paths or relative to ${projectDir}/references/
    libStructure = "libV1.json"

    //// Optional workflow parameters
    bclConvertParams = "" //"--bcl-only-lane 1" // Only use lane 1
    fastqc = true // Run fastqc on input fastqs

    starFeature = "GeneFull_Ex50pAS" // What read to transcript overlaps STAR counts
    starStrand = "Forward"
    
    starTrimming = "" // "--clipAdapterType CellRanger4" // PolyA trimming in STAR
    trimFastq = true // PolyA trimming with cutadapt
    trimAdapt = "-a A{8}N{100} -a T{8}N{100}" // Adapters to trim with cutadapt

    internalReport = false

    // Cell Thresholding parameters
    topCellPercent = 99
    minCellRatio = 10
    minReads = 100

    // Choose star thresholding or our custom thresholding
    useSTARthreshold = false 

    // Flag that ensures azimuth is run downstream to classify cell types
    cellTyping = false

    //// Max. resources that can be requested for a single job
    max_memory = 64.GB
    max_cpus = 12
}

process {
    errorStrategy = 'retry'
    maxRetries = 1

    cpus = { max_cpu(2) }
    memory = { max_mem(4.GB * task.attempt) }
    time = 48.h

    container = "felixschlesinger/scalerna@sha256:b333af2e72f69c2c9cbdb6587d04a93d9d4016c3b03eb30e37557a54284119f6"

    withLabel: small {
        cpus = 1
        memory = { max_mem(2.GB * task.attempt) }
    }
    withName:bclconvert {
        container = 'felixschlesinger/bclconvert'
        cpus = { max_cpu(24) }
        memory = { max_mem(24.GB * task.attempt) }
    }
    withName:fastqc {
        container = 'biocontainers/fastqc:v0.11.9_cv8'
    }
    withName:trimFq {
	    cpus = { max_cpu(4) }
	    memory = { max_mem(2.GB * task.attempt) }
    }
    withName:barcodeParser {
        cpus = { max_cpu(6) }
        memory = { max_mem(6.GB * task.attempt) }
    }
    withName:starsolo {
        cpus = { max_cpu(12) }
        memory = { max_mem(32.GB * task.attempt) } // Set in process based on genome index size
    }
    withLabel:report {
        container = "felixschlesinger/scalernareport@sha256:12154a5160b7632e1b427023491096169f9844bdf41da9f4916af28153d3c8b0" 
        cpus = { max_cpu(5) }
        memory = { max_mem(10.GB * task.attempt) }
    }
    withName:cellTyping {
      container = "felixschlesinger/assign_types@sha256:ba692079fb54926612e98186e24f621ffa66217b542efe1bd65ef0b05d5cf172"
      memory = { max_mem(64.GB * task.attempt) }
    }
}
profiles {
  conda {
    conda.enabled = true
    process.conda = "$projectDir/envs/scaleRna.conda.yml"
    process {
      withLabel:report {
        conda = "$projectDir/envs/scalereport.conda.yml"
      }
    }
  }
  docker {
    // Shared settings for all container engines go here
    docker.enabled = true
    docker.fixOwnership = true
    // docker.runOptions = '-u $(id -u):$(id -g)' // Alt. to fixOwnership; match user ID in container to outside
  }
  singularity {
    singularity.enabled = true 
    singularity.autoMounts = true
    docker.enabled = false
  }
  podman {
    podman.enabled = true 
    docker.enabled = false
  }
}
conda.createTimeout = '1 h'

// nf-core functions to ensure that resource requirements don't go 
// beyond a maximum limit
def max_mem(obj) {
    if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
    else
        return obj
}
def max_cpu(obj) {
    return Math.min(obj, params.max_cpus as int)
}
