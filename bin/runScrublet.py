#!/usr/bin/env python
import scipy.io
import numpy as np
import pandas as pd 
import argparse 
from pathlib import Path
import scrublet as scr
from os import makedirs

def generateDoubletScores(outDir: Path, countsPath: Path):
    counts_matrix = scipy.io.mmread(countsPath  / 'matrix.mtx').T.tocsc()
    #genes = np.array(scr.load_genes(countsPath / 'features.tsv', delimiter='\t', column=1))
    print(f"Generating Doublet Scores for {counts_matrix.shape[0]} using counts for {counts_matrix.shape[1]} genes")
    scrub = scr.Scrublet(counts_matrix, expected_doublet_rate=0.05)
    ## TODO: paramterize input vars 
    scrub.scrub_doublets(min_counts=2, min_cells=3, min_gene_variability_pctl=85, n_prin_comps=30)
    scrub.call_doublets()
    df = pd.DataFrame({
    'doublet_score': scrub.doublet_scores_obs_,
    'predicted_doublet': scrub.predicted_doublets_
    })
    makedirs(outDir, exist_ok=True)
    df.to_csv(outDir / 'scrublet_output_table.csv', index=False)
    
def main():
    parser = argparse.ArgumentParser(description="Script to run scrublet on filtered matrix generated by STARsolo")
    parser.add_argument("--outDir", metavar="Output Directory")
    parser.add_argument("--counts", metavar="Path to raw count matrix for which to generated Doublet Scores", type=str, required=False, default=None, help="The directory name containing the nextflow workflow output (same as outDir specified in workflow)")
    args = parser.parse_args()
    generateDoubletScores(Path(args.outDir), Path(args.counts))

if __name__ == "__main__":
   main()
